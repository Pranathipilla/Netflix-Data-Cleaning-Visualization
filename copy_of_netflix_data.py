# -*- coding: utf-8 -*-
"""Copy of Netflix Data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CtCilIs9V3LRdjbhvNQk2vza6-87CJ_H
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("/content/netflix1.csv")
print(df)
print(df.shape)
print(df.dtypes)
df.info()

df.describe()

print(df.isnull().sum())
df.drop_duplicates(inplace=True)

df['date_added'] = pd.to_datetime(df['date_added'])
df.describe()
df.dropna(subset=['title', 'type', 'country','date_added'], inplace=True)

sns.countplot(data=df, x='type')
plt.title('Movie vs TV Show Count')
plt.show()
top_countries=df['country'].dropna()
top_countries=top_countries[top_countries!='Not Given']
top_countries.value_counts().head(10).plot(kind='bar')
plt.title('Top 10 Countries on Netflix')

df['year']=df['date_added'].dt.year
df['month']=df['date_added'].dt.month
df['day']=df['date_added'].dt.day
df['month_year']=df['date_added'].dt.to_period('M').astype(str)
year_releases=df.groupby('year').size()
month_releases=df.groupby('month').size()
plt.plot(month_releases.index, month_releases.values,label='Monthly Releases',color='skyblue')
plt.plot(year_releases.index.astype(str),year_releases,label='Yearly Realeases',color='orange',linewidth=2)
plt.title('Content Releases : Month vs Year')
plt.xlabel('Time')
plt.ylabel('No. of Releases')
plt.tight_layout()
plt.show()

df['year_added'] = df['date_added'].dt.year
df.groupby('year_added').size().plot(kind='bar', figsize=(10,5), title='Netflix Content Added Over Time')
plt.show()
plt.tight_layout()
plt.show()

top_directors = df['director'].dropna()
top_directors = top_directors[top_directors != 'Not Given']
top_directors.value_counts().head(10).plot(kind='bar')
plt.title("Top 10 Directors on Netflix")
plt.xlabel("Number of Titles")
plt.ylabel("Director")
plt.show()

df['listed_in'].str.split(', ', expand=True).stack().value_counts().head(10).plot(kind='bar')
plt.title('Top Genres')
plt.show()

df['rating'].value_counts()

ratings=df['rating'].value_counts().reset_index().sort_values(by='count', ascending=False)
plt.title('ratings on Netflix')
plt.xlabel('rating types')
plt.ylabel('Frequemcy')
plt.bar(ratings['rating'], ratings['count'])
plt.show()
plt.pie(ratings['count'][:8],labels =ratings['rating'][:8],autopct='%.0f%%')
plt.suptitle('Ratings')

"""
Build a recommendation system using the provided data."""

df_recommendation = df[['title', 'director', 'listed_in', 'country']].copy()
df_recommendation.fillna('Not Given', inplace=True)
display(df_recommendation.head())
print(df_recommendation.isnull().sum())

df=pd.read_csv("/content/netflix1.csv")
df.dropna(subset=['title', 'type', 'country'], inplace=True)
df['date_added'] = pd.to_datetime(df['date_added'])
df_recommendation = df[['title', 'director', 'listed_in', 'country']].copy()
df_recommendation.fillna('Not Given', inplace=True)
display(df_recommendation.head())
print(df_recommendation.isnull().sum())

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
print(cosine_sim.shape)

def get_recommendations(title, cosine_sim=cosine_sim, df=df_recommendation):
    try:
        idx = df[df['title'] == title].index[0]
        sim_scores = list(enumerate(cosine_sim[idx]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        sim_scores = sim_scores[1:11]
        movie_indices = [i[0] for i in sim_scores]
        return df['title'].iloc[movie_indices].tolist()
    except IndexError:
        return "Movie title not found in the dataset."

print(get_recommendations('Midnight Mass'))
print(get_recommendations('Sankofa'))
print(get_recommendations('NonExistentMovie'))

"""###Conclusion

I performed comprehensive Netflix dataset analysis using Python (pandas, matplotlib, seaborn),created data visualizations for content distribution, release patterns, and genre analysis,built a content-based recommendation system using cosine similarity and analyzed movies vs TV shows, top countries, directors, genres, and ratings.It shows Release strategy,global presence,rating distribution,focusing on genres.

### Insights

*   The current recommendation system is based on content-based filtering using director, genres, and country.
*   The recommendation function could be integrated into a user interface or application to provide real-time recommendations to users.

"""